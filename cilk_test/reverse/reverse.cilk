// -*- C++ -*-

/*
 * reverse.cilk
 *
 * An implementation of reverse using Cilk parallelization. Based on
 * the qsort cilk++ demo program.
 *
 */
#include <cilk.h>
#include <cilkview.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <functional>
#include "util.h"

void reverse(int* begin, int* end) {
  if (end - begin > 1) {
    --end;
    swap(*begin, *end);
    reverse(begin+1, end);
  }
}

/*
// stack overflow error
void reverse_cilk(int* begin, int* end) {
  if (end - begin > 1) {
    --end;
    swap(*begin, *end);
    cilk_spawn reverse_cilk(begin+1, end);
  }
}
*/

int revmain(int n) {
  cout << "Revese an array of size " << n << "..." << endl;
  int* a(new int[n]);
  for(int i = 0; i < n; ++i) a[i] = i;

  //cout << "a = " << a << endl;
  reverse(a, a+n);
  //cout << "after reverse a = " << a << endl;
  reverse(a, a+n);

  delete[] a;
  return 0;
}

/*
int revmain(int n) {
  cout << "Revese an array of size " << n << "..." << endl;
  vector<int> a;
  for(int i = 0; i < n; ++i) a.push_back(i);
  vector<int> a_cpy(a);
  //cout << "a = " << a << endl;
  reverse_cilk(a.begin(), a.end());
  //cout << "after reverse a = " << a << endl;
  reverse_cilk(a.begin(), a.end());
  assert(a == a_cpy);
  return 0;
}
*/

int cilk_main(int argc, char* argv[])
{
  int n = 10 * 1000 * 1000;
  //int n = 10;
    if (argc > 1) {
         n = atoi(argv[1]);
         if (n <= 0) {
              cerr << "Invalid argument" << std::endl;
              cerr << "Usage: revese_ex N" << std::endl;
              cerr << "       N = number size of vector" << std::endl;
              return 1;
         }
    }

    return revmain(n);
}
